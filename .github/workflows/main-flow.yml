name: Publish application to the Docker Hub
on: [push, workflow_dispatch]
env:
  #the global environment variable
  MY_GLOBAL_ENV_VAR: 'workflow'
jobs:
  package:
    runs-on: ubuntu-latest
    env:
      #the job scope environment variable.
      MY_GLOBAL_ENV_VAR: 'job'
    outputs:
      artifact-name: ${{ steps.package-name-provider.outputs.artifact-name }}
    steps:
      - name: Download code
        uses: actions/checkout@v3
        with:
          #default value. no need to specify
          fetch-depth: '1'

      - name: Set up JDK 21
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: 21

      - name: Verify JDK version
        run: java -version

      - name: Install maven
        uses: stCarolas/setup-maven@v5
        with:
          maven-version: 3.8.2

      - name: Verify maven version
        run: mvn -v

        #cache is located on the repo level and can be persisted
        #action automatically creates cache when job finish successfully
        #output of this step is 'cache-hit' and key
      - name: Cache local Maven repository # special Maven implementation
        uses: actions/cache@v4
        with:
          #what should be cached
          path: ~/.m2/repository
          #key which is used for the retrieving the cache
          key: ${{ runner.os }}-maven-${{ hashFiles('**/pom.xml') }}
          #if previous key wasn't found try to find by this pattern
          restore-keys: |
            ${{ runner.os }}-maven-

      - name: Package artifact
        env:
          #defining evn var for the step scope.
          MY_GLOBAL_ENV_VAR: 'step'
        run: mvn clean package

      - name: Print env var
        #prints job level env var
        run: |
          echo "MY_GLOBAL_ENV_VAR value is:"${{ env.MY_GLOBAL_ENV_VAR }}

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: package
          path: | # | is used for multiple values
            target/time-service-0.0.1-SNAPSHOT.jar

      - name: Provide package name
        id: package-name-provider
        run: echo "artifact-name=time-service-0.0.1-SNAPSHOT.jar" >> "$GITHUB_OUTPUT"

  test-sample:
    runs-on: ubuntu-latest
    environment: test
    steps:
      - name: Download code
        uses: actions/checkout@v3
        with:
          fetch-depth: '1' #default value. no need to specify

      - name: Print env var
        run: |
          echo "MY_GLOBAL_ENV_VAR value is:"${{ env.MY_GLOBAL_ENV_VAR }}

      - name: Set up JDK 21
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: 21

      - name: Verify JDK version
        run: java -version

      - name: Install maven
        uses: stCarolas/setup-maven@v5
        with:
          maven-version: 3.8.2

      - name: Verify maven version
        run: mvn -v

        #cache is located on the repo level and can be persisted
        #action automatically creates cache when job finish successfully
        #output of this step is 'cache-hit' and key
      - name: Cache local Maven repository # special Maven implementation
        uses: actions/cache@v4
        with:
          #what should be cached
          path: ~/.m2/repository
          #key which is used for the retrieving the cache
          key: ${{ runner.os }}-maven-${{ hashFiles('**/pom.xml') }}
          #if previous key wasn't found try to find by this pattern
          restore-keys: |
            ${{ runner.os }}-maven-

      - name: Package artifact
        env:
          MY_GLOBAL_ENV_VAR: 'step'
        run: mvn clean package

  download-package:
    #allows to run jobs sequentially. default behaviour: parallel
    needs:
      - package
    runs-on: ubuntu-22.04
    steps:
      #allows to download artifact
      - name: Download package
        uses: actions/download-artifact@v4
        with:
          name: package

      - name: Ensure that package exists
        run: echo "${{needs.package.outputs.artifact-name}}"

  publish:
    needs: package
    uses: ./.github/workflows/docker-publish.yml
    #you need explicitly pass secrets to reusable workflow
    secrets:
      password: ${{ secrets.DOCKERHUB_TOKEN }}
    with:
      repository: 'waistdeepwooden/timeservice'
      version: 'latest'

  print-error:
    runs-on: ubuntu-22.04
    needs: publish
    if: ${{needs.publish.outputs.error == 'true'}}
    steps:
      - name: Print result
        run: echo "Publishing image is failed."